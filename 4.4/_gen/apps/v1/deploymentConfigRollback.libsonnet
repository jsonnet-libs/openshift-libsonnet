{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='deploymentConfigRollback', url='', help='"DeploymentConfigRollback provides the input to rollback generation."'),
  '#new':: d.fn(help='new returns an instance of DeploymentConfigRollback', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'apps.openshift.io/v1',
    kind: 'DeploymentConfigRollback',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"DeploymentConfigRollbackSpec represents the options for rollback generation."'),
  spec: {
    '#from':: d.obj(help='"ObjectReference contains enough information to let you inspect or modify the referred object."'),
    from: {
      '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { from+: { apiVersion: apiVersion } } },
      '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
      withFieldPath(fieldPath): { spec+: { from+: { fieldPath: fieldPath } } },
      '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { from+: { kind: kind } } },
      '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { from+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { from+: { namespace: namespace } } },
      '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
      withResourceVersion(resourceVersion): { spec+: { from+: { resourceVersion: resourceVersion } } },
      '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
      withUid(uid): { spec+: { from+: { uid: uid } } },
    },
    '#withIncludeReplicationMeta':: d.fn(help='"IncludeReplicationMeta specifies whether to include the replica count and selector."', args=[d.arg(name='includeReplicationMeta', type=d.T.boolean)]),
    withIncludeReplicationMeta(includeReplicationMeta): { spec+: { includeReplicationMeta: includeReplicationMeta } },
    '#withIncludeStrategy':: d.fn(help='"IncludeStrategy specifies whether to include the deployment Strategy."', args=[d.arg(name='includeStrategy', type=d.T.boolean)]),
    withIncludeStrategy(includeStrategy): { spec+: { includeStrategy: includeStrategy } },
    '#withIncludeTemplate':: d.fn(help='"IncludeTemplate specifies whether to include the PodTemplateSpec."', args=[d.arg(name='includeTemplate', type=d.T.boolean)]),
    withIncludeTemplate(includeTemplate): { spec+: { includeTemplate: includeTemplate } },
    '#withIncludeTriggers':: d.fn(help='"IncludeTriggers specifies whether to include config Triggers."', args=[d.arg(name='includeTriggers', type=d.T.boolean)]),
    withIncludeTriggers(includeTriggers): { spec+: { includeTriggers: includeTriggers } },
    '#withRevision':: d.fn(help='"Revision to rollback to. If set to 0, rollback to the last revision."', args=[d.arg(name='revision', type=d.T.integer)]),
    withRevision(revision): { spec+: { revision: revision } },
  },
  '#withName':: d.fn(help='"Name of the deployment config that will be rolled back."', args=[d.arg(name='name', type=d.T.string)]),
  withName(name): { name: name },
  '#withUpdatedAnnotations':: d.fn(help='"UpdatedAnnotations is a set of new annotations that will be added in the deployment config."', args=[d.arg(name='updatedAnnotations', type=d.T.object)]),
  withUpdatedAnnotations(updatedAnnotations): { updatedAnnotations: updatedAnnotations },
  '#withUpdatedAnnotationsMixin':: d.fn(help='"UpdatedAnnotations is a set of new annotations that will be added in the deployment config."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='updatedAnnotations', type=d.T.object)]),
  withUpdatedAnnotationsMixin(updatedAnnotations): { updatedAnnotations+: updatedAnnotations },
  '#mixin': 'ignore',
  mixin: self,
}
