{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='customBuildStrategy', url='', help='"CustomBuildStrategy defines input parameters specific to Custom build."'),
  '#from':: d.obj(help='"ObjectReference contains enough information to let you inspect or modify the referred object."'),
  from: {
    '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
    withApiVersion(apiVersion): { from+: { apiVersion: apiVersion } },
    '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."', args=[d.arg(name='fieldPath', type=d.T.string)]),
    withFieldPath(fieldPath): { from+: { fieldPath: fieldPath } },
    '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
    withKind(kind): { from+: { kind: kind } },
    '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { from+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { from+: { namespace: namespace } },
    '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { from+: { resourceVersion: resourceVersion } },
    '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { from+: { uid: uid } },
  },
  '#pullSecret':: d.obj(help='"LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."'),
  pullSecret: {
    '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { pullSecret+: { name: name } },
  },
  '#withBuildAPIVersion':: d.fn(help='"buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder"', args=[d.arg(name='buildAPIVersion', type=d.T.string)]),
  withBuildAPIVersion(buildAPIVersion): { buildAPIVersion: buildAPIVersion },
  '#withEnv':: d.fn(help='"env contains additional environment variables you want to pass into a builder container."', args=[d.arg(name='env', type=d.T.array)]),
  withEnv(env): { env: if std.isArray(v=env) then env else [env] },
  '#withEnvMixin':: d.fn(help='"env contains additional environment variables you want to pass into a builder container."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
  withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
  '#withExposeDockerSocket':: d.fn(help='"exposeDockerSocket will allow running Docker commands (and build Docker images) from inside the Docker container."', args=[d.arg(name='exposeDockerSocket', type=d.T.boolean)]),
  withExposeDockerSocket(exposeDockerSocket): { exposeDockerSocket: exposeDockerSocket },
  '#withForcePull':: d.fn(help='"forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally"', args=[d.arg(name='forcePull', type=d.T.boolean)]),
  withForcePull(forcePull): { forcePull: forcePull },
  '#withSecrets':: d.fn(help='"secrets is a list of additional secrets that will be included in the build pod"', args=[d.arg(name='secrets', type=d.T.array)]),
  withSecrets(secrets): { secrets: if std.isArray(v=secrets) then secrets else [secrets] },
  '#withSecretsMixin':: d.fn(help='"secrets is a list of additional secrets that will be included in the build pod"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='secrets', type=d.T.array)]),
  withSecretsMixin(secrets): { secrets+: if std.isArray(v=secrets) then secrets else [secrets] },
  '#mixin': 'ignore',
  mixin: self,
}
