{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='deploymentConfigStatus', url='', help='"DeploymentConfigStatus represents the current deployment state."'),
  '#details':: d.obj(help='"DeploymentDetails captures information about the causes of a deployment."'),
  details: {
    '#withCauses':: d.fn(help='"Causes are extended data associated with all the causes for creating a new deployment"', args=[d.arg(name='causes', type=d.T.array)]),
    withCauses(causes): { details+: { causes: if std.isArray(v=causes) then causes else [causes] } },
    '#withCausesMixin':: d.fn(help='"Causes are extended data associated with all the causes for creating a new deployment"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='causes', type=d.T.array)]),
    withCausesMixin(causes): { details+: { causes+: if std.isArray(v=causes) then causes else [causes] } },
    '#withMessage':: d.fn(help='"Message is the user specified change message, if this deployment was triggered manually by the user"', args=[d.arg(name='message', type=d.T.string)]),
    withMessage(message): { details+: { message: message } },
  },
  '#withAvailableReplicas':: d.fn(help='"AvailableReplicas is the total number of available pods targeted by this deployment config."', args=[d.arg(name='availableReplicas', type=d.T.integer)]),
  withAvailableReplicas(availableReplicas): { availableReplicas: availableReplicas },
  '#withConditions':: d.fn(help="\"Conditions represents the latest available observations of a deployment config's current state.\"", args=[d.arg(name='conditions', type=d.T.array)]),
  withConditions(conditions): { conditions: if std.isArray(v=conditions) then conditions else [conditions] },
  '#withConditionsMixin':: d.fn(help="\"Conditions represents the latest available observations of a deployment config's current state.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='conditions', type=d.T.array)]),
  withConditionsMixin(conditions): { conditions+: if std.isArray(v=conditions) then conditions else [conditions] },
  '#withLatestVersion':: d.fn(help='"LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync."', args=[d.arg(name='latestVersion', type=d.T.integer)]),
  withLatestVersion(latestVersion): { latestVersion: latestVersion },
  '#withObservedGeneration':: d.fn(help='"ObservedGeneration is the most recent generation observed by the deployment config controller."', args=[d.arg(name='observedGeneration', type=d.T.integer)]),
  withObservedGeneration(observedGeneration): { observedGeneration: observedGeneration },
  '#withReadyReplicas':: d.fn(help='"Total number of ready pods targeted by this deployment."', args=[d.arg(name='readyReplicas', type=d.T.integer)]),
  withReadyReplicas(readyReplicas): { readyReplicas: readyReplicas },
  '#withReplicas':: d.fn(help='"Replicas is the total number of pods targeted by this deployment config."', args=[d.arg(name='replicas', type=d.T.integer)]),
  withReplicas(replicas): { replicas: replicas },
  '#withUnavailableReplicas':: d.fn(help='"UnavailableReplicas is the total number of unavailable pods targeted by this deployment config."', args=[d.arg(name='unavailableReplicas', type=d.T.integer)]),
  withUnavailableReplicas(unavailableReplicas): { unavailableReplicas: unavailableReplicas },
  '#withUpdatedReplicas':: d.fn(help='"UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec."', args=[d.arg(name='updatedReplicas', type=d.T.integer)]),
  withUpdatedReplicas(updatedReplicas): { updatedReplicas: updatedReplicas },
  '#mixin': 'ignore',
  mixin: self,
}
